package org.fl.util;

import java.net.URI;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Vector;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.fl.util.file.FilesUtils;
import org.fl.util.os.OperatingInfo;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

/*
# Properties for RunningContext 
#
runningContext.operatingInfo.log=true

 */

public class RunningContext {

	private final static String projectBuildPropertyFile = "project.properties" ;
	
	private final static String datePattern = "uuuu-MM-dd HH:mm:ss.SSS VV" ;
	
	private Logger pLog;
	private AdvancedProperties props;
	private PropertiesStorage propsStorage ;
	private LoggerManager logMgr ;
	private Instant initializationDate ;
	
	private JsonElement buildInformation ;
	
	public RunningContext(String name, String systemProperty, URI defaultPropertyUri) {
		
		try {
			propsStorage = new PropertiesStorage(systemProperty, defaultPropertyUri);
			initRunningContext(name, systemProperty, null, null) ;
		} catch (Exception e) {
			pLog = Logger.getLogger("Default running context logger") ;
			pLog.log(Level.SEVERE, "Exception processing property file.  ", e);
			e.printStackTrace();
			props = new AdvancedProperties() ;
			
		}	
	}

	public RunningContext(String name, String systemProperty, String defaultPropertyPathName) {

		try {
			Path defaultPropertyPath = Paths.get(defaultPropertyPathName) ;
			propsStorage = new PropertiesStorage(systemProperty, defaultPropertyPath);
			initRunningContext(name, systemProperty, null, null) ;
		} catch (Exception e) {
			pLog = Logger.getLogger("Default running context logger") ;
			pLog.log(Level.SEVERE, "Exception processing property file.  ", e);
			e.printStackTrace();
			props = new AdvancedProperties() ;

		}	
	}
	
	private void initRunningContext(String name, String systemProperty, String baseDir, Handler customLogHandler) {
		pLog = null;
		initializationDate = Instant.now() ;

		// get property file
		props = propsStorage.getAdvanced() ; 

		// Initialize logger
		if ((baseDir != null) && (! baseDir.isEmpty())) {
			if (customLogHandler != null) {
				logMgr= new LoggerManager(name, baseDir, props, customLogHandler) ;
			} else {
				logMgr= new LoggerManager(name, baseDir, props) ;
			}
		} else {
			logMgr= new LoggerManager(name, props) ;
		}

		pLog = logMgr.getLog() ;
		props.setLog(pLog) ;

		// eventually get the property file generated by the build
		try {
			PropertiesStorage propsProjectStorage = new PropertiesStorage(Paths.get(projectBuildPropertyFile));
			AdvancedProperties propsProject = propsProjectStorage.getAdvancedTry(pLog) ; 

			if (propsProject != null) {
				props.putAll(propsProject);

				Gson gson = new Gson() ;
				buildInformation = gson.toJsonTree(propsProject) ;
			} else {
				buildInformation = null ;
			}
		} catch (Exception e) {
			pLog.log(Level.WARNING, "No build information for " + name, e) ;
		}

		boolean logOperatingInfos = props.getBoolean("runningContext.operatingInfo.log", false) ;
		if (logOperatingInfos) {
			pLog.info(getOperatingInfos(true).toString()) ;
		}

	}
	
	public Logger getpLog() {
		return pLog;
	}

	public AdvancedProperties getProps() {
		return props;
	}
	
	public void addCustomLogHandler(Handler customLogHandler) {
		
		if (logMgr != null) {
			logMgr.addCustomHandler(customLogHandler);
		}
	}
	
	// Set the level of logger and log handlers
	public boolean setLogsLevel(JsonObject levelsJson) {
		
		if (logMgr != null) {
			return logMgr.setLogsLevels(levelsJson);
		} else {
			return false ;
		}
	}
	
	public JsonObject getLogsLevel() {
		
		JsonObject ret ;
		if (logMgr != null) {
			ret = logMgr.getLoggerLevels() ;
		} else {
			// No logger manager, return an empty JsonObject
			ret = new JsonObject() ;
		}
		return ret ;
	}
	
	public URL getPropertiesLocation() {
		return propsStorage.getPropertyLocation() ;
	}
	
	public StringBuilder getMemoryLogs() {
		return logMgr.getMemoryLogs() ;
	}
	
	public String deleteMemoryLogs() {
		return logMgr.deleteMemoryLogs() ;
	}

	public String deleteAndResizeMemoryLogs(int newsize) {
		return logMgr.deleteMemoryLogsAndResize(newsize) ;
	}
	
	public Instant getInitializationDate() {
		return initializationDate;
	}
	
	public String printInitializationDate() {
		return DateTimeFormatter.ofPattern(datePattern).format(ZonedDateTime.ofInstant(initializationDate, ZoneId.systemDefault()));
	}
	
	public JsonObject getOperatingInfos(boolean withIpLookup) {
		OperatingInfo operatingInfo = new OperatingInfo() ;
		return operatingInfo.getInfo(withIpLookup) ;
	}
	
	public JsonObject getApplicationInfo(boolean withIpLookup) {
		
		JsonObject applicationInfo = new JsonObject() ;
		String initDate = printInitializationDate() ;
		JsonObject operatingContext = getOperatingInfos(withIpLookup) ;
		
		URL propsLocation = getPropertiesLocation() ;
		if (propsLocation != null) {
			applicationInfo.addProperty("propertiesLocation", propsLocation.toString());
		} else {
			applicationInfo.addProperty("propertiesLocation", "No properties file location");
		}
		if (buildInformation != null) {
			applicationInfo.add("buildInformation", buildInformation);
		} else {
			applicationInfo.addProperty("buildInformation", "No build information") ;
		}
		applicationInfo.addProperty("initialisationDate", initDate);
		applicationInfo.add("applicationProperties", getPropertiesAsJson()) ;
		applicationInfo.add("operatingContext", operatingContext) ;
		applicationInfo.add("fileSystemsInformation", FilesUtils.getFileSystemsInformation(pLog)) ;
				
		return applicationInfo ;
	}
	
	public JsonArray getPropertiesAsJson() {
		
		Enumeration<Object> keys = props.keys() ;
		Vector<String> keyList = new Vector<String>();
		while (keys.hasMoreElements()) {
			keyList.add((String)keys.nextElement()) ;
		}
		Collections.sort(keyList);
		JsonArray res = new JsonArray() ;
		for (String key : keyList) {
			res.add(key + ":" + props.getProperty(key));
		}
		return res ;
	}
	
	public String getPropertiesAsString() {
		return propsStorage.getPropertiesAsString() ;
	}
	
	public AdvancedProperties changeProperties(String properties, Logger log) {
		return propsStorage.changeProperties(properties, log) ;
	}
}
